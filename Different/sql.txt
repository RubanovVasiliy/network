Cities - список городов

id - первичный ключ
name - название
population - численность населения
founded - год основания
country_id - id страны

Countries - список стран

id - первичный ключ
name - название
population - численность населения
gdp - валовый продукт в долларах

Companies - компании

id - первичный ключ
name - название
city_id - город в котором находится штаб-квартира
revenue - годовая выручка в долларах
labors - численность сотрудников

Постройте таблицу, где для каждой страны посчитано число компаний, удволетворяющих условиям:

1) штаб квартира компании находится в этой стране
2) число сотрудников компании не менее 1000 человек


CREATE TABLE Countries (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  population INTEGER NOT NULL,
  gdp INTEGER NOT NULL
);

INSERT INTO Countries VALUES (1, 'RUSSIA',  200, 1890);
INSERT INTO Countries VALUES (2, 'GERMANY', 100, 1990);
INSERT INTO Countries VALUES (3, 'USA',     500, 2000);

CREATE TABLE Cities (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  population INTEGER NOT NULL,
  founded INTEGER NOT NULL,
  country_id INTEGER NOT NULL,
  FOREIGN KEY (country_id)  REFERENCES Countries (id)
);

INSERT INTO Cities VALUES (1, 'NSK',    2000000,    1890, 1);
INSERT INTO Cities VALUES (2, 'MSK',    1000000,    1990, 1);
INSERT INTO Cities VALUES (3, 'KSK',    500000,     2000, 1);
INSERT INTO Cities VALUES (4, 'SK111',  5000000,    1890, 2);
INSERT INTO Cities VALUES (5, 'SK222',  2000000,    1990, 2);
INSERT INTO Cities VALUES (6, 'usa',    100000,     2000, 3);

CREATE TABLE Companies (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  city_id INTEGER NOT NULL,
  revenue INTEGER NOT NULL,
  labors INTEGER NOT NULL,
  FOREIGN KEY (city_id)  REFERENCES Cities (id)
);

INSERT INTO Companies VALUES (1, 'VK',      1,    1890, 2000);
INSERT INTO Companies VALUES (2, 'YA',      2,    1990, 999);
INSERT INTO Companies VALUES (3, 'RU',      3,    2000, 5000);
INSERT INTO Companies VALUES (4, 'BOSCH',   4,    1890, 1000);
INSERT INTO Companies VALUES (5, 'AEG',     5,    1990, 100);
INSERT INTO Companies VALUES (6, 'AMAZON',  6,    2000, 2000);


SELECT Countries.name, count(*) AS CompaniesCount
FROM Cities, Countries, Companies
WHERE Cities.country_id == Countries.id AND Companies.id == Cities.id AND Companies.labors >= 1000
GROUP BY Countries.name
ORDER BY Countries.id;

Опишите словами алгоритм решения задачи

Ввод: натуральное число n
Вывод: количество простых чисел строго меньше n

Решение должно быть вычислительно-эффективным

Заводим счетчик чисел k.
Идем по элементам от 2 до n, не включая n. 
Каждый элемент делим от 2 до квадратного корня из n, если делиться без остатка увеличиваем счетчик на единицу.
Вы водим n - (2 + k). 
O(n*logn)
*	
Опишите алгоритм разбиения массива длины N на k подмассивов так, чтобы размер самого длинного и самого короткого подмассива отличалась не больше чем на 1
Чему будут равны длины подмассивов?
Может ли k быть больше длины N?

Если N > k.
Делим N на k получаем длину подмассивов m и остаток от деления p. Первые p подмассивов будут длинной m + 1, остальные длинной m.

Если N = k.
Все подмассивы будут длинной 1.

Если N < k.
k может быть больше N в случае разбиения массива на подмассивы длинной 1 и 0.
*	
Дан массив неповторяющихся чисел, который был отсортирован, а затем циклически сдвинут на неизвестное число позиций.
Опишите без кода и псевдокода алгоритм поиска максимума в таком массиве
Оцените сложность предложенного алгоритма
Изменится ли сложность если массив содержит повторяющиеся числа?

Берем первый элемент за максимум. Идем по массиву и сравниваем с максимум, если текущий элемент больше берем его за максимум. 
O(n)
Нет не измениться. 
*	
Напишите регулярное выражение, которое позволяет выделить все строки отвечающие условиям:

Состоят только из букв
Одна и только одна из букв является заглавной

Пример строк которые могут быть выделены варажением:

"Мама",
"авТо",
"гриБ",
'Яблоко', 'яБлоко', 'ябЛоко', 'яблОко', 'яблоКо', 'яблокО'

Пример строк которые не должны быть выделены выражением:

"агент007" - содержит цифры
"стриж" - только строчные буквы
"ГТО", - более одной заглавной буквы
"Три богатыря" - содержит пробел, допустимы только буквы

Это задание проверяется автоматическим тестированием в Python и оценивается высоко в случае прохождения всех тестов

((^[а-я]*[А-Я][а-я]+$)|(^[а-я]+[А-Я][а-я]*$)|(^[а-я]+[А-Я][а-я]+$))
*	
Дан указатель на корень двоичного дерева
Опишите словами алгоритм, который вернёт True если дерево является двоичным деревом поиска и False если не является

Вершина дерева содержит целочисленное значение (value) и два указателя на поддеревья (left и right).

В виде структуры на языке C это можно записать так:

struct node {
  int value;
  node* left;
  node* right;
}
Используем алгоритм обхода графа в глубину, проверяем что каждый левый потомок меньше головы, а правый больше либо равен. Если все верно обходим дальше иначе возвращаем false.
*	
В реляционной базе данных существуют таблицы:

Cities - список городов

id - первичный ключ
name - название
population - численность населения
founded - год основания
country_id - id страны

Countries - список стран

id - первичный ключ
name - название
population - численность населения
gdp - валовый продукт в долларах

Companies - компании

id - первичный ключ
name - название
city_id - город в котором находится штаб-квартира
revenue - годовая выручка в долларах
labors - численность сотрудников

Постройте таблицу, где для каждой страны посчитано число компаний, удволетворяющих условиям:

1) штаб квартира компании находится в этой стране
2) число сотрудников компании не менее 1000 человек

SELECT Countries.name, count(*) AS CompaniesCount
FROM Cities, Countries, Companies
WHERE Cities.country_id == Countries.id AND Companies.id == Cities.id AND Companies.labors >= 1000
GROUP BY Countries.name
ORDER BY Countries.id;
Cities - список городов

id - первичный ключ
name - название
population - численность населения
founded - год основания
country_id - id страны

Countries - список стран

id - первичный ключ
name - название
population - численность населения
gdp - валовый продукт в долларах

Companies - компании

id - первичный ключ
name - название
city_id - город в котором находится штаб-квартира
revenue - годовая выручка в долларах
labors - численность сотрудников

Постройте таблицу, где для каждой страны посчитано число компаний, удволетворяющих условиям:

1) штаб квартира компании находится в этой стране
2) число сотрудников компании не менее 1000 человек


CREATE TABLE Countries (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  population INTEGER NOT NULL,
  gdp INTEGER NOT NULL
);

INSERT INTO Countries VALUES (1, 'RUSSIA',  200, 1890);
INSERT INTO Countries VALUES (2, 'GERMANY', 100, 1990);
INSERT INTO Countries VALUES (3, 'USA',     500, 2000);

CREATE TABLE Cities (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  population INTEGER NOT NULL,
  founded INTEGER NOT NULL,
  country_id INTEGER NOT NULL,
  FOREIGN KEY (country_id)  REFERENCES Countries (id)
);

INSERT INTO Cities VALUES (1, 'NSK',    2000000,    1890, 1);
INSERT INTO Cities VALUES (2, 'MSK',    1000000,    1990, 1);
INSERT INTO Cities VALUES (3, 'KSK',    500000,     2000, 1);
INSERT INTO Cities VALUES (4, 'SK111',  5000000,    1890, 2);
INSERT INTO Cities VALUES (5, 'SK222',  2000000,    1990, 2);
INSERT INTO Cities VALUES (6, 'usa',    100000,     2000, 3);

CREATE TABLE Companies (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  city_id INTEGER NOT NULL,
  revenue INTEGER NOT NULL,
  labors INTEGER NOT NULL,
  FOREIGN KEY (city_id)  REFERENCES Cities (id)
);

INSERT INTO Companies VALUES (1, 'VK',      1,    1890, 2000);
INSERT INTO Companies VALUES (2, 'YA',      2,    1990, 999);
INSERT INTO Companies VALUES (3, 'RU',      3,    2000, 5000);
INSERT INTO Companies VALUES (4, 'BOSCH',   4,    1890, 1000);
INSERT INTO Companies VALUES (5, 'AEG',     5,    1990, 100);
INSERT INTO Companies VALUES (6, 'AMAZON',  6,    2000, 2000);


SELECT Countries.name, count(*) AS CompaniesCount
FROM Cities, Countries, Companies
WHERE Cities.country_id == Countries.id AND Companies.id == Cities.id AND Companies.labors >= 1000
GROUP BY Countries.name
ORDER BY Countries.id;

Опишите словами алгоритм решения задачи

Ввод: натуральное число n
Вывод: количество простых чисел строго меньше n

Решение должно быть вычислительно-эффективным

Заводим счетчик чисел k.
Идем по элементам от 2 до n, не включая n. 
Каждый элемент делим от 2 до квадратного корня из n, если делиться без остатка увеличиваем счетчик на единицу.
Вы водим n - (2 + k). 
O(n*logn)
*	
Опишите алгоритм разбиения массива длины N на k подмассивов так, чтобы размер самого длинного и самого короткого подмассива отличалась не больше чем на 1
Чему будут равны длины подмассивов?
Может ли k быть больше длины N?

Если N > k.
Делим N на k получаем длину подмассивов m и остаток от деления p. Первые p подмассивов будут длинной m + 1, остальные длинной m.

Если N = k.
Все подмассивы будут длинной 1.

Если N < k.
k может быть больше N в случае разбиения массива на подмассивы длинной 1 и 0.
*	
Дан массив неповторяющихся чисел, который был отсортирован, а затем циклически сдвинут на неизвестное число позиций.
Опишите без кода и псевдокода алгоритм поиска максимума в таком массиве
Оцените сложность предложенного алгоритма
Изменится ли сложность если массив содержит повторяющиеся числа?

Берем первый элемент за максимум. Идем по массиву и сравниваем с максимум, если текущий элемент больше берем его за максимум. 
O(n)
Нет не измениться. 
*	
Напишите регулярное выражение, которое позволяет выделить все строки отвечающие условиям:

Состоят только из букв
Одна и только одна из букв является заглавной

Пример строк которые могут быть выделены варажением:

"Мама",
"авТо",
"гриБ",
'Яблоко', 'яБлоко', 'ябЛоко', 'яблОко', 'яблоКо', 'яблокО'

Пример строк которые не должны быть выделены выражением:

"агент007" - содержит цифры
"стриж" - только строчные буквы
"ГТО", - более одной заглавной буквы
"Три богатыря" - содержит пробел, допустимы только буквы

Это задание проверяется автоматическим тестированием в Python и оценивается высоко в случае прохождения всех тестов

((^[а-я]*[А-Я][а-я]+$)|(^[а-я]+[А-Я][а-я]*$)|(^[а-я]+[А-Я][а-я]+$))
*	
Дан указатель на корень двоичного дерева
Опишите словами алгоритм, который вернёт True если дерево является двоичным деревом поиска и False если не является

Вершина дерева содержит целочисленное значение (value) и два указателя на поддеревья (left и right).

В виде структуры на языке C это можно записать так:

struct node {
  int value;
  node* left;
  node* right;
}
Используем алгоритм обхода графа в глубину, проверяем что каждый левый потомок меньше головы, а правый больше либо равен. Если все верно обходим дальше иначе возвращаем false.
*	
В реляционной базе данных существуют таблицы:

Cities - список городов

id - первичный ключ
name - название
population - численность населения
founded - год основания
country_id - id страны

Countries - список стран

id - первичный ключ
name - название
population - численность населения
gdp - валовый продукт в долларах

Companies - компании

id - первичный ключ
name - название
city_id - город в котором находится штаб-квартира
revenue - годовая выручка в долларах
labors - численность сотрудников

Постройте таблицу, где для каждой страны посчитано число компаний, удволетворяющих условиям:

1) штаб квартира компании находится в этой стране
2) число сотрудников компании не менее 1000 человек

SELECT Countries.name, count(*) AS CompaniesCount
FROM Cities, Countries, Companies
WHERE Cities.country_id == Countries.id AND Companies.id == Cities.id AND Companies.labors >= 1000
GROUP BY Countries.name
ORDER BY Countries.id;